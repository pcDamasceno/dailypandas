//######################## Std-149-dpmo ########################
//@version=5
strategy("Std-149-dpmo [DailyPanda]",
     shorttitle="Std-149-dpmo",
     overlay = true,
     initial_capital=4000,
     currency=currency.USD)


import loxx/loxxexpandedsourcetypes/4 as loxx
import TradingView/Strategy/3 as tvS

//---------------------------------------------------------------------------------------------------------------------}
// INPUTS
//---------------------------------------------------------------------------------------------------------------------{

i_riskReward = input.float(defval=1, title="Risk Reward Per Operation", step=0.1, group="Risk Management")
i_plotexits = input.bool(title="Plot TP and SL", defval=true)
i_lookbackPeriod = input.int(defval=15, title="Lookback Period For Swing High and Low (STOP-LOSS)", step=1)
i_startTime = input.int(defval=0, title="Start Trading at: (H)", minval=0)
i_stopTime = input.int(defval=24, title="Stop Trading at: (H)", minval=0, maxval=24, step=1)
i_dpmoShow = input.bool(true, 'Show DPMO', group="DPMO")


greencolor = #2DD204  
redcolor = #D2042D 

//---------------------------------------------------------------------------------------------------------------------}
// Functions / Methods
//---------------------------------------------------------------------------------------------------------------------{

//swing high/low
f_swingPoint(_lookback, _high_low) =>
    var float swingPoint = na
    for i = 2 to _lookback // start from 2 to avoid negative indexing
        if _high_low == 'high'
            if high[i] > high[i-1] and high[i] > high[i-2] and high[i] > high[i+1] and high[i] > high[i+2]
                swingPoint := high[i]
        else
            if low[i] < low[i-1] and low[i] < low[i-2] and low[i] < low[i+1] and low[i] < low[i+2]
                swingPoint := low[i]
    swingPoint

//factorial calc
fact(int n)=>
    float a = 1
    for i = 1 to n 
        a *= i
    a

//alpha calc
_alpha(int period, int poles)=>
    w = 2.0 * math.pi / period
    float b = (1.0 - math.cos(w)) / (math.pow(1.414, 2.0 / poles) - 1.0)
    float a = - b + math.sqrt(b * b + 2.0 * b)
    a
    
//n-pole calc
_makeCoeffs(simple int period, simple int order)=>
    coeffs = matrix.new<float>(order + 1, 3, 0.)
    float a = _alpha(period, order)
    for r = 0 to order 
        out = nz(fact(order) / (fact(order - r) * fact(r)), 1)
        matrix.set(coeffs, r, 0, out)
        matrix.set(coeffs, r, 1, math.pow(a, r))
        matrix.set(coeffs, r, 2, math.pow(1.0 - a, r))
    coeffs
    
//n-pole calc
_npolegf(float src, simple int period, simple int order)=>
    var coeffs = _makeCoeffs(period, order)
    float filt = src * matrix.get(coeffs, order, 1)
    int sign = 1
    for r = 1 to order 
        filt += sign * matrix.get(coeffs, r, 0) * matrix.get(coeffs, r, 2) * nz(filt[r])
        sign *= -1
    filt

//std filter
_filt(float src, int len, float filter)=>
    float price = src
    float filtdev = filter * ta.stdev(src, len)
    price := math.abs(price - nz(price[1])) < filtdev ? nz(price[1]) : price
    price
    
period = input.int(50,'Period', group = "Basic Settings")
order = input.int(10,'Order', group = "Basic Settings", minval = 1)

filter = 1 //"Filter Devaitions"
filterperiod = input.int(49, "Filter Period", minval = 0, group= "Filter Settings")


kfl=0.666 //Kaufman's Adaptive MA (KAMA) Only - Fast End
ksl=0.0645 //Kaufman's Adaptive MA (KAMA) Only - Slow End"
amafl = 2 //Adaptive Moving Average (AMA) Only - Fast"
amasl = 30 //Adaptive Moving Average (AMA) Only - Slow"

float src = loxx.rclose()
	
out = _npolegf(src, period, order)
out := _filt(out, filterperiod, filter)

sig = nz(out[1])

state = 0
if (out > sig) 
    state := 1
if (out < sig) 
    state := -1

pregoLong = out > sig and (nz(out[1]) < nz(sig[1]) or nz(out[1]) == nz(sig[1]))
pregoShort = out < sig and (nz(out[1]) > nz(sig[1]) or nz(out[1]) == nz(sig[1]))

contsw = 0
contsw := nz(contsw[1])
contsw := pregoLong ? 1 : pregoShort ? -1 : nz(contsw[1])

goLong = pregoLong and nz(contsw[1]) == -1
goShort = pregoShort and nz(contsw[1]) == 1 

var color colorout = na
colorout := state == -1 ? redcolor : state == 1 ? greencolor : nz(colorout[1])

plot(out, "N-Pole GF", color = colorout, linewidth = 3)
barcolor(colorout)

plotshape(goLong, title = "Long", color = color.green, textcolor = color.green, text = "L", style = shape.triangleup, location = location.belowbar, size = size.tiny)
plotshape(goShort, title = "Short", color = color.fuchsia, textcolor = color.fuchsia, text = "S", style = shape.triangledown, location = location.abovebar, size = size.tiny)


// ######################## 
// SMARTSCAR 
// ########################
sma_control = input(title='SMA for visual control', defval=145)
plot(ta.sma(close, sma_control), color=color.new(color.purple, 0))

// ######################## 
// DPMO 
// ########################
length1 = 35 //First Smoothing
length2 = 20 //Second Smoothing
siglength = 10 //Signal Smoothing

calc_csf(close, length) =>
    sm = 2.0 / length
    var float csf = na
    csf := na(csf[1]) ? close : (close - csf[1]) * sm + csf[1]
    csf

i = close / nz(close[1], close) * 100
pmol2 = calc_csf(i - 100, length1)
pmol = calc_csf(10 * pmol2, length2)
pmols = ta.ema(pmol, siglength)
d = pmol - pmols


// Get the last swing low within the lookback period
lastSwingLow = f_swingPoint(i_lookbackPeriod, 'low')
lastSwingHigh = f_swingPoint(i_lookbackPeriod, 'high')

// Plot the last swing low
var float stopLoss = na
var float takeProfit = na
posSize = math.abs(strategy.position_size)
plot(posSize > 0 and i_plotexits ? stopLoss: na, color=color.red, style=plot.style_cross, linewidth=2, title="Last Swing")
plot(posSize > 0 and i_plotexits ? takeProfit: na, color=color.green, style=plot.style_cross, linewidth=2, title="TP")


//######################## 
// ORDERS
// ########################
//LONG
if goLong and close > sma_control and d > 0
    stopLossDistance = close - lastSwingLow
    takeProfitDistance = stopLossDistance * i_riskReward

    stopLoss := lastSwingLow
    takeProfit := close + takeProfitDistance
    strategy.entry(id="S-Long", direction=strategy.long, comment="Entry Long")
    strategy.exit("Exit L", "S-Long", stop=lastSwingLow, limit=close + takeProfitDistance)

//SHORT
if goShort and close < sma_control and d < 0
    stopLossDistance = math.abs(close - lastSwingHigh)
    takeProfitDistance = stopLossDistance * i_riskReward

    stopLoss := lastSwingHigh
    takeProfit := close - takeProfitDistance

    strategy.entry(id="S-Short", direction=strategy.short, comment="Entry Short")
    strategy.exit("Exit S", from_entry="S-Short", stop=lastSwingHigh, limit=close - takeProfitDistance)

    
tvS.closeAtEndOfSession("S-Short", comment="EoS Sell")
tvS.closeAtEndOfSession("S-Long", comment="EoS Long")

///////////////////
// MONTHLY TABLE //

new_month = month(time) != month(time[1])
new_year = year(time) != year(time[1])

eq = strategy.equity

bar_pnl = eq / eq[1] - 1

cur_month_pnl = 0.0
cur_year_pnl = 0.0

// Current Monthly P&L
cur_month_pnl := new_month ? 0.0 : (1 + cur_month_pnl[1]) * (1 + bar_pnl) - 1

// Current Yearly P&L
cur_year_pnl := new_year ? 0.0 : (1 + cur_year_pnl[1]) * (1 + bar_pnl) - 1

// Arrays to store Yearly and Monthly P&Ls
var month_pnl = array.new_float(0)
var month_time = array.new_int(0)

var year_pnl = array.new_float(0)
var year_time = array.new_int(0)

last_computed = false

if not na(cur_month_pnl[1]) and (new_month or barstate.islastconfirmedhistory)
    if last_computed[1]
        array.pop(month_pnl)
        array.pop(month_time)

    array.push(month_pnl, cur_month_pnl[1])
    array.push(month_time, time[1])

if not na(cur_year_pnl[1]) and (new_year or barstate.islastconfirmedhistory)
    if last_computed[1]
        array.pop(year_pnl)
        array.pop(year_time)

    array.push(year_pnl, cur_year_pnl[1])
    array.push(year_time, time[1])

last_computed := barstate.islastconfirmedhistory ? true : nz(last_computed[1])

// Monthly P&L Table    
var monthly_table = table(na)

if barstate.islastconfirmedhistory
    monthly_table := table.new(position.bottom_right, columns=14, rows=array.size(year_pnl) + 1, border_width=1)

    table.cell(monthly_table, 0, 0, '', bgcolor=#cccccc)
    table.cell(monthly_table, 1, 0, 'Jan', bgcolor=#cccccc)
    table.cell(monthly_table, 2, 0, 'Feb', bgcolor=#cccccc)
    table.cell(monthly_table, 3, 0, 'Mar', bgcolor=#cccccc)
    table.cell(monthly_table, 4, 0, 'Apr', bgcolor=#cccccc)
    table.cell(monthly_table, 5, 0, 'May', bgcolor=#cccccc)
    table.cell(monthly_table, 6, 0, 'Jun', bgcolor=#cccccc)
    table.cell(monthly_table, 7, 0, 'Jul', bgcolor=#cccccc)
    table.cell(monthly_table, 8, 0, 'Aug', bgcolor=#cccccc)
    table.cell(monthly_table, 9, 0, 'Sep', bgcolor=#cccccc)
    table.cell(monthly_table, 10, 0, 'Oct', bgcolor=#cccccc)
    table.cell(monthly_table, 11, 0, 'Nov', bgcolor=#cccccc)
    table.cell(monthly_table, 12, 0, 'Dec', bgcolor=#cccccc)
    table.cell(monthly_table, 13, 0, 'Year', bgcolor=#999999)


    for yi = 0 to array.size(year_pnl) - 1 by 1
        table.cell(monthly_table, 0, yi + 1, str.tostring(year(array.get(year_time, yi))), bgcolor=#cccccc)

        y_color = array.get(year_pnl, yi) > 0 ? color.new(color.green, transp=50) : color.new(color.red, transp=50)
        table.cell(monthly_table, 13, yi + 1, str.tostring(math.round(array.get(year_pnl, yi) * 100, 2)), bgcolor=y_color)

    for mi = 0 to array.size(month_time) - 1 by 1
        m_row = year(array.get(month_time, mi)) - year(array.get(year_time, 0)) + 1
        m_col = month(array.get(month_time, mi))
        m_color = array.get(month_pnl, mi) > 0 ? color.new(color.green, transp=70) : color.new(color.red, transp=70)

        table.cell(monthly_table, m_col, m_row, str.tostring(math.round(array.get(month_pnl, mi) * 100, 2)), bgcolor=m_color)

